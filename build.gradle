plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'com.spotify.dockerfile' version '1.4.13'
}

group = 'com.tlc.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

ext {
    dockerRegistry = ""
    dockerName = ""
    dockerTag = ""
    springProfile = ""
    finalName = 'batch-service-1-hqsovj4kuk'
    profileName = "default"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.postgresql:postgresql:+'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.projectlombok:lombok'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

bootJar {
    archiveFileName = "${finalName}.jar"
    mainClassName = 'com.tlc.test.Main'
}

dockerfile {
    dockerfile = file('./src/main/docker/Dockerfile')
    buildArgs = [
            JAR_FILE: "${finalName}.jar",
            SPRING_PROFILE: "${springProfile}"
    ]
    repository = dockerRegistry
}

tasks.register('buildImage') {
    dependsOn 'dockerfile'
    doLast {
        dockerfile {
            tag "${dockerName}-latest"
            push()
        }
    }
}

tasks.register('tagImage') {
    dependsOn 'dockerfile'
    doLast {
        dockerfile {
            tag "${dockerName}-${dockerTag}"
            push()
        }
    }
}

enforcer {
    rules = [
            requireMavenVersion: "3.0.5"
    ]
}

dependencyUpdates {
    checkForGradleUpdate = true
    outputFormatter = 'plain'
    reportfileName = 'dependency-updates'
}

sourceSets {
    main {
        resources {
            srcDirs = ['../simple/src/main/java', '../simple/src/main/resources']
            include '**/*.xml'
        }
    }
}
